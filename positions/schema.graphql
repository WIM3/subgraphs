type Position @entity {
  # trader - amm
  id: ID!
  timestamp: Int!
  trader: Bytes!
  amm: Bytes!
  margin: BigInt!
  openNotional: BigInt!
  size: BigInt!
  tradingVolume: BigInt!
  leverage: BigInt!
  entryPrice: BigInt!
  fee: BigInt!
  realizedPnl: BigInt!
  unrealizedPnl: BigInt!
  badDebt: BigInt!
  liquidationPenalty: BigInt!
  fundingPayment: BigInt!
  totalPnlAmount: BigInt!
  positionChanges: [PositionChange!]! @derivedFrom(field: "position")
  positionLiquidations: [PositionLiquidation!]! @derivedFrom(field: "position")
  marginChanges: [MarginChange!]! @derivedFrom(field: "position")
}

type PositionChange @entity {
  # transaction hash - log index
  id: ID!
  position: Position!
  timestamp: Int!
  trader: Bytes!
  amm: Bytes!
  margin: BigInt!
  notional: BigInt!
  exchangedSize: BigInt!
  fee: BigInt!
  sizeAfter: BigInt!
  realizedPnl: BigInt!
  unrealizedPnlAfter: BigInt!
  badDebt: BigInt!
  liquidationPenalty: BigInt!
  spotPrice: BigInt!
  fundingPayment: BigInt!
}

type PositionLiquidation @entity {
  # transaction hash - log index
  id: ID!
  position: Position!
  timestamp: Int!
  trader: Bytes!
  amm: Bytes!
  notional: BigInt!
  size: BigInt!
  liquidationFee: BigInt!
  liquidator: Bytes!
  badDebt: BigInt!
}

type MarginChange @entity {
  # transaction hash - log index
  id: ID!
  position: Position!
  timestamp: Int!
  sender: Bytes!
  amm: Bytes!
  amount: BigInt!
  fundingPayment: BigInt!
}

type Amm @entity {
  # amm address
  id: ID!
  priceFeedKey: String!
  fundingPeriod: Int!
}
